Connect to a running mongo instance, use a database named mongo_practice.
a) use mongo-practice


Insert the following documents into a movies collection. 

title : Fight Club
writer : Chuck Palahniuko 
year : 1999 
actors : [ Brad Pitt Edward Norton ]
a) db.movies.insert({title:"Fight Club", writer:"Chuck Palahniuko", year : 1999, actors :["Brad Pitt","Edward Norton"] })

title : Pulp Fiction 
writer : Quentin Tarantino 
year : 1994 
actors : [ John Travolta Uma Thurman ]
a) db.movies.insert({title:"Pulp Fiction", writer:"Quentin Tarantino", year : 1994, actors :["John Travolta","Uma Thurman"] })

title : Inglorious Basterds 
writer : Quentin Tarantino 
year : 2009 
actors : [ Brad Pitt Diane Kruger Eli Roth ]
a) db.movies.insert({title:"Inglorious Basterds", writer:"Quentin Tarantino", year : 2009, actors :["Brad Pitt","Diane Kruger","Eli Roth"] })

title : The Hobbit: An Unexpected Journey 
writer : J.R.R. Tolkein 
year : 2012 
franchise : The Hobbit
a)db.movies.insert({title:"The Hobbit: An Unexpected Journey", writer:"J.R.R. Tolkein", year : 2012, franchise : "The Hobbit" })

title : The Hobbit: The Desolation of Smaug 
writer : J.R.R. Tolkein 
year : 2013 
franchise : The Hobbit
a)db.movies.insert({title:"The Hobbit: The Desolation of Smaug", writer:"J.R.R. Tolkein", year : 2013, franchise : "The Hobbit" })


title : The Hobbit: The Battle of the Five Armies 
writer : J.R.R. Tolkein 
year : 2012 
franchise : The Hobbit 
synopsis : Bilbo and Company are forced to engage in a war against an array
 of combatants and keep the Lonely Mountain from 
falling into the hands of a rising darkness.
a)db.movies.insert({title:"The Hobbit: The Battle of the Five Armies", writer:"J.R.R. Tolkein", year : 2012, franchise : "The Hobbit",
synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." })


title : Pee Wee Herman's Big Adventure
a)db.movies.insert({title:"Pee Wee Herman's Big Adventure" })


title : Avatar
a)db.movies.insert({title:"Avatar" })



Query / Find Documents

query the movies collection to

1. get all documents
a)db.movies.find()

2. get all documents with writer set to "Quentin Tarantino"
a)db.movies.find({writer: "Quentin Tarantino"})

3. get all documents where actors include "Brad Pitt"
a)db.movies.find({actors:"Brad Pitt"})

4. get all documents with franchise set to "The Hobbit"
a)db.movies.find({franchise:"The Hobbit"})

5. get all movies released in the 90s
a)db.movies.find({$and: [{year: {$gt: 1990}}, {year: {$lt: 2000}}]})

6. get all movies released before the year 2000 or after 2010
a)db.movies.find({$or: [{year: {$lt: 2000}}, {year: {$gt: 2010}}]})


Update Documents

1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a 
   spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
a)db.movies.update({title: "The Hobbit: An Unexpected Journey"},{$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain 
  with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})


2.add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to 
  reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
a)db.movies.update({title: "The Hobbit: The Desolation of Smaug"},{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, 
  continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})


3.add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
a)db.movies.update({title: "Pulp Fiction"},{$set:{actors:["John Travolta","Uma Thurman","Samuel L. Jackson"]}});


Text Search

1. find all movies that have a synopsis that contains the word "Bilbo"
a) db.movies.createIndex({synopsis:"text"})   (creating index)
   db.movies.find({$text:{$search:"Bilbo"}})

2.find all movies that have a synopsis that contains the word "Gandalf"
a) db.movies.find({$text:{$search:"Gandalf"}})

3.find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
a)db.movies.find({$text: {$search: "Bilbo -Gandalf"}})

4.find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
a)db.movies.find({$text: {$search: "dwarves hobbit"}})

5.find all movies that have a synopsis that contains the word "gold" and "dragon"
a)db.movies.find({$text: {$search: "gold dragon"}})


Delete Documents

1. delete the movie "Pee Wee Herman's Big Adventure"
a)db.movies.remove({title: "Pee Wee Herman's Big Adventure"})

2. delete the movie "Avatar"
a)db.movies.remove({title: "Avatar"})


Relationships

1.Insert the following documents into a users collection 

username : GoodGuyGreg 
first_name : "Good Guy" 
last_name : "Greg"

a)db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})

 
username : ScumbagSteve 
full_name : 
first : "Scumbag" 
last : "Steve"

a)db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})

Insert the following documents into a posts collection


username : GoodGuyGreg 
title : Passes out at party 
body : Wakes up early and cleans house

a)db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})


username : GoodGuyGreg 
title : Steals your identity 
body : Raises your credit score

a)db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})


username : GoodGuyGreg 
title : Reports a bug in your code 
body : Sends you a Pull Request

a)db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})


username : ScumbagSteve 
title : Borrows something 
body : Sells it

a)db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})

username : ScumbagSteve 
title : Borrows everything 
body : The end

a)db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})


username : ScumbagSteve 
title : Forks your repo on github 
body : Sets to private

a)db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})


Insert the following documents into a comments collection

username : GoodGuyGreg 
comment : Hope you got a good deal! 
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows something"

a)db.posts.createIndex({title:"text"})
 db.posts.find({$text: {$search: "Borrows something"}})    (to know the object id)
 db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("5fff385598991215e78d577a"")})


username : GoodGuyGreg 
comment : What's mine is yours! 
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"

a)db.posts.find({$text: {$search: "Borrows everything"}})
  db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("5fff384b98991215e78d5779")})

username : GoodGuyGreg 
comment : Don't violate the licensing agreement! 
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github"

a)db.posts.find({$text: {$search: "Forks your repo on github"}})
  db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("5fff384198991215e78d5778")})


username : ScumbagSteve 
comment : It still isn't clean 
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"

a)db.posts.find({$text: {$search: "Passes out at party"}})
  db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("5fff36cb98991215e78d5775")})

username : ScumbagSteve 
comment : Denied your PR cause I found a hack 
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your code"

a)db.posts.find({$text: {$search: "Reports a bug in your code"}})
  db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("5fff376f98991215e78d5777")})


Querying related collections

1. find all users
a)db.users.find().pretty()

2.find all posts
a)db.posts.find().pretty()

3.find all posts that was authored by "GoodGuyGreg"
a)db.posts.find({username:"GoodGuyGreg"})

4. find all posts that was authored by "ScumbagSteve"
a)db.posts.find({username:"ScumbagSteve"})

5. find all comments
a)db.comments.find().pretty()

6. find all comments that was authored by "GoodGuyGreg"
a)db.comments.find({username:"GoodGuyGreg"})

7. find all comments that was authored by "ScumbagSteve"
a)db.comments.find({username:"ScumbagSteve"})

8. find all comments belonging to the post "Reports a bug in your code"
a)db.comments.find({post:"Reports a bug in your code"})
